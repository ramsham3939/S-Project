# -*- coding: utf-8 -*-
"""Copy of Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hq4O7qYj0rdhGKpKhwC4z7Gd2wUA4ogE
"""

# !pip install git+https://github.com/openai/whisper.git
# !sudo apt update && sudo apt install ffmpeg

# !whisper "Recording.m4a" --model medium --language hi

# !whisper "Recording.m4a" --model medium --language hi --task translate > output.txt

# whisper language code
# whiper current version and capabilities

# !pip install textblob

# with open('output.txt', 'r') as f:
#   text = f.read()

# from textblob import TextBlob

# blob = TextBlob(text)
# sentiment = blob.sentiment.polarity

# if sentiment > 0.2:
#   print("The customer seems satisfied.")
# elif sentiment < -0.2:
#   print("The customer seems frustrated.")
# else:
#   print("It's hard to tell the customer's sentiment from the text.")

import streamlit as st
from textblob import TextBlob
import subprocess
import os

# Install necessary packages (run only once, or you can do it outside the app)
# !pip install git+https://github.com/openai/whisper.git
# !sudo apt update && sudo apt install ffmpeg


def process_audio(file_path):
    # Transcribe and translate audio with Whisper
    whisper_command = f"whisper {
        file_path} --model medium --language hi --task translate"
    os.system(whisper_command)

    # Read the output from the file
    with open('output.txt', 'r') as f:
        text = f.read()
    return text


def analyze_sentiment(text):
    # Analyze sentiment using TextBlob
    blob = TextBlob(text)
    sentiment = blob.sentiment.polarity

    if sentiment > 0.2:
        return "The customer seems satisfied."
    elif sentiment < -0.2:
        return "The customer seems frustrated."
    else:
        return "It's hard to tell the customer's sentiment from the text."


def main():
    st.title("Customer Sentiment Analysis from Audio")

    # Upload audio file
    uploaded_file = st.file_uploader(
        "Choose an audio file", type=["mp3", "m4a"])

    if uploaded_file is not None:
        # Save uploaded file temporarily
        with open("uploaded_audio.m4a", "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Process the audio to get transcription and translation
        st.write("Processing the audio... Please wait.")
        text = process_audio("uploaded_audio.m4a")

        # Display the transcribed text
        st.subheader("Transcribed Text")
        st.write(text)

        # Analyze sentiment of the transcribed text
        sentiment = analyze_sentiment(text)

        # Display sentiment result
        st.subheader("Sentiment Analysis")
        st.write(sentiment)


if __name__ == "__main__":
    main()
